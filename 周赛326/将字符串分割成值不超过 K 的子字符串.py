""" 给你一个字符串 s ，它每一位都是 1 到 9 之间的数字组成，同时给你一个整数 k 。

如果一个字符串 s 的分割满足以下条件，我们称它是一个 好 分割：

s 中每个数位 恰好 属于一个子字符串。
每个子字符串的值都小于等于 k 。
请你返回 s 所有的 好 分割中，子字符串的 最少 数目。如果不存在 s 的 好 分割，返回 -1 。

注意：

一个字符串的 值 是这个字符串对应的整数。比方说，"123" 的值为 123 ，"1" 的值是 1 。
子字符串 是字符串中一段连续的字符序列。
 

示例 1：

输入：s = "165462", k = 60
输出：4
解释：我们将字符串分割成子字符串 "16" ，"54" ，"6" 和 "2" 。每个子字符串的值都小于等于 k = 60 。
不存在小于 4 个子字符串的好分割。
示例 2：

输入：s = "238182", k = 5
输出：-1
解释：这个字符串不存在好分割。 """

class Solution:
    def minimumPartition(self, s: str, k: int) -> int:
        # 贪心算法
        # 从左到右遍历字符串，每次遍历到一个字符，就将其加入到当前的子字符串中，如果当前子字符串的值大于 k ，则将其加入到下一个子字符串中。
        # 如果当前子字符串的值小于等于 k ，则将其加入到当前子字符串中。
        res = 0
        tempVal = 0
        for i in range(len(s)):
            curVal = int(s[i])
            if tempVal * 10 + curVal <= k:
                tempVal = tempVal * 10 + curVal
            else:
                if curVal > k:
                    return -1
                res += 1
                tempVal = curVal
        return res + 1

print(Solution().minimumPartition("238182", 5))

        