""" 给你一个下标从 0 开始的整数数组nums 。每次操作中，你可以：

选择两个满足 0 <= i, j < nums.length 的不同下标 i 和 j 。
选择一个非负整数 k ，满足 nums[i] 和 nums[j] 在二进制下的第 k 位（下标编号从 0 开始）是 1 。
将 nums[i] 和 nums[j] 都减去 2k 。
如果一个子数组内执行上述操作若干次后，该子数组可以变成一个全为 0 的数组，那么我们称它是一个 美丽 的子数组。

请你返回数组 nums 中 美丽子数组 的数目。

子数组是一个数组中一段连续 非空 的元素序列。

 

示例 1：

输入：nums = [4,3,1,2,4]
输出：2
解释：nums 中有 2 个美丽子数组：[4,3,1,2,4] 和 [4,3,1,2,4] 。
- 按照下述步骤，我们可以将子数组 [3,1,2] 中所有元素变成 0 ：
  - 选择 [3, 1, 2] 和 k = 1 。将 2 个数字都减去 21 ，子数组变成 [1, 1, 0] 。
  - 选择 [1, 1, 0] 和 k = 0 。将 2 个数字都减去 20 ，子数组变成 [0, 0, 0] 。
- 按照下述步骤，我们可以将子数组 [4,3,1,2,4] 中所有元素变成 0 ：
  - 选择 [4, 3, 1, 2, 4] 和 k = 2 。将 2 个数字都减去 22 ，子数组变成 [0, 3, 1, 2, 0] 。
  - 选择 [0, 3, 1, 2, 0] 和 k = 0 。将 2 个数字都减去 20 ，子数组变成 [0, 2, 0, 2, 0] 。
  - 选择 [0, 2, 0, 2, 0] 和 k = 1 。将 2 个数字都减去 21 ，子数组变成 [0, 0, 0, 0, 0] 。
示例 2：

输入：nums = [1,10,4]
输出：0
解释：nums 中没有任何美丽子数组。
 

提示：

1 <= nums.length <= 105
0 <= nums[i] <= 106 """

from typing import List


class Solution:
    def beautifulSubarrays(self, nums: List[int]) -> int:
        # 前缀异或 + 哈希表

        # xor_i表示nums[0:i]的前缀异或
        # 如果xor_i = xor_j，那么nums[i:j]的异或和为0, 即nums[i:j]为美丽子数组
        # 哈希表计算xor_i出现的次数

        prefixXor = [0]
        prefixXorCount = {0: 1}
        for num in nums:
            prefixXor.append(prefixXor[-1] ^ num)
            prefixXorCount[prefixXor[-1]] = prefixXorCount.get(prefixXor[-1], 0) + 1

        res = 0
        for xor in prefixXorCount:
            res += prefixXorCount[xor] * (prefixXorCount[xor] - 1) // 2

        return res

test = [413,229,373,275,280,54,95,51,82,55,398,68,332,144,436,5,49,100,215,326,119,208,470,287,220,375,285,407,267,408,150,456,52,316,366,417,500,465,257,336,279,231,321,152,168,120,210,170,344,75,369,407,486,450,264,425,106,44,319,150,373,367,267,213,407,220,77,329,339,308,329,337,456,395,336,284,206,126,92,20,10,353,398,10,19,8,216,487,371,2,51,348,185,411,190,182,249,362,220,419,10,219,159,368,384,144,121,123,410,405,146,230,161,36,461,486,454,292,415,159,67,231,459,500,231,129,430,308,210,460,348,485,443,3,57,174,327,470,470,406,295,221,160,460,189,380,282,136,352,226,283,133,169,12,274,112,147,486,197,32,259,349,5,153,341,165,475,484,233,174,300,410,23,204,114,380,3,39,104,404,310,220,246,33,398,189,22,288,15,406,128,435,67,413,11,31,363,363,448,110,360,48,286,167,110,221,19,211,139,350,306,3,261,227,160,426,495,199,441,107,205,279,265,239,257,395,193,332,327,120,178,372,244,179,127,422,280,242,243,242,91,187,133,83,21,257,99,76,408,236,82,455,40,395,444,451,217,86,329,247,45,249,396,163,433,130,364,51,365,484,228,339,241,370,428,483,19,180,102,96,140,105,45,118,49,424,205,116,62,490,173,466,86,225,466,128,101,302,53,264,95,357,286,455,147,441,116,330,414,46,172,346,61,144,72,46,205,28,8,470,228,320,377,267,423,350,461,206,136,22,229,187,245,325,187,340,374,486,206,333,0,188,300,61,38,453,43,238,345,375,166,47,412,238,274,250,311,400,86,110,141,61,111,477,324,304,163,84,337,173,405,479,386,121,249,4,375,480,52,186,497,286,472,423,458,444,368,399,177,452,292,120,163,424,335,358,69,82]

print(Solution().beautifulSubarrays([4, 3, 1, 2, 4]))
print(Solution().beautifulSubarrays([1, 10, 4]))
print(Solution().beautifulSubarrays(test))